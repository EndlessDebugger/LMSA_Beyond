require 'rails_helper'
require 'faker'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe('/points', type: :request) do
  before do
    lmsa_sign_in
    lmsa_make_admin
  end
  # This should return the minimal set of attributes required to create a valid
  # Point. As you add validations to Point, be sure to
  # adjust the attributes here as well.

  let(:valid_attributes) do
    # skip('Add a hash of attributes valid for your model')
    {
      name: "test",
      val: Faker::Number.number(digits: 3),
      desc: Faker::ChuckNorris.fact
    }
  end

  let(:invalid_attributes) do
    # skip('Add a hash of attributes invalid for your model')
    {
      name: nil,
      val: nil,
      desc: nil
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Point.create!(valid_attributes)
      get points_url
      expect(response).to(be_successful)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      point = Point.create!(valid_attributes)
      get point_url(point)
      expect(response).to(be_successful)
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_point_url
      expect(response).to(be_successful)
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      point = Point.create!(valid_attributes)
      get edit_point_url(point)
      expect(response).to(be_successful)
    end
  end

  describe 'POST /create' do
    skip()
    context 'with valid parameters' do
      it 'creates a new Point' do
        skip()
        expect do
          post(points_url, params: { point: valid_attributes })
        puts response.body
        end.to(change(Point, :count).by(1))
      end

      it 'redirects to the created point' do
        skip()
        post points_url, params: { point: valid_attributes }
        expect(response).to(redirect_to(point_url(Point.last)))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Point' do
        skip()
        expect do
          post(points_url, params: { point: invalid_attributes })
        end.to(change(Point, :count).by(0))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        # skip('Add a hash of attributes valid for your model')
        {
          name: "test",
          val: Faker::Number.number(digits: 3),
          desc: Faker::ChuckNorris.fact
        }
      end

      it 'updates the requested point' do
        skip()
        point = Point.create!(valid_attributes)
        patch point_url(point), params: { point: new_attributes }, as: :json
        point.reload
        # skip('Add assertions for updated state')
        expect(response.body).to(include(new_attributes[:user_id].to_s))
        expect(response.body).to(include(new_attributes[:balance].to_s))
        expect(response.body).to(include(new_attributes[:description].to_s))
        expect(response.body).to(include(new_attributes[:admin_award_id].to_s))
        expect(response.body).to(include(new_attributes[:hours_attend].to_s))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new event' do
        skip()
        point = Point.create!(valid_attributes)
        patch point_url(point), params: { point: invalid_attributes }, as: :json
        expect(response).not_to(be_successful)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested point' do
      point = Point.create!(valid_attributes)
      expect do
        delete(point_url(point))
      end.to(change(Point, :count).by(-1))
    end

    it 'redirects to the points list' do
      point = Point.create!(valid_attributes)
      delete point_url(point)
      expect(response).to(redirect_to(points_url))
    end
  end
end
