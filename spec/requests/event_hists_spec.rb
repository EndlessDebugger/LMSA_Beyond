require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/event_hists', type: :request do

  #before do
    #Rails.application.env_config["devise.mapping"] = Devise.mappings[:user] # If using Devise
    #Rails.application.env_config["omniauth.auth"] = OmniAuth.config.mock_auth[:google_oauth2]
    #get user_google_oauth2_omniauth_authorize_path
    #get user_google_oauth2_omniauth_callback_url
  #end
  let(:event_attributes) do
    {
      event_name: "Meeting",
      e_type: "General Meeting",
      event_date: Faker::Date.forward(days: 99),
      description: Faker::ChuckNorris.fact,
      event_creator: 1,
      #event_creator: User.where(uid: 1)[:email],
      virtual: false,
      password: Faker::Internet.password,
      meeting_link: Faker::Internet.url,
      signin_time: :event_date,
      point_val: Faker::Number.number(digits: 3),
      graphics: Faker::Internet.url,
      total_event_hr: Faker::Number.decimal(l_digits: 2)
    }
  end
  before do
    lmsa_sign_in
    lmsa_make_admin
    Event.create! event_attributes
  end

  # This should return the minimal set of attributes required to create a valid
  # EventHist. As you add validations to EventHist, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    # skip("Add a hash of attributes valid for your model")
    {
      event_id: Event.where(event_name: "Meeting").first.id,
      user_id:  1,
      sign_in: true,
      point_recv: event_attributes[:point_val]
    }
  end

  let(:invalid_attributes) do
    # skip("Add a hash of attributes invalid for your model")
    {
      event_id: nil,
      user_id: nil,
      sign_in: nil,
      point_recv: nil
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      EventHist.create! valid_attributes
      get event_hists_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      event_hist = EventHist.create! valid_attributes
      get event_hist_url(event_hist)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_event_hist_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      event_hist = EventHist.create! valid_attributes
      get edit_event_hist_url(event_hist)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new EventHist' do
        expect do
          post event_hists_url, params: { event_hist: valid_attributes }
        end.to change(EventHist, :count).by(1)
      end

      it 'redirects to the created event_hist' do
        post event_hists_url, params: { event_hist: valid_attributes }
        expect(response).to redirect_to(event_hist_url(EventHist.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new EventHist' do
        expect do
          post event_hists_url, params: { event_hist: invalid_attributes }
        end.to change(EventHist, :count).by(0)
      end

    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        #skip('Add a hash of attributes valid for your model')
        {
          event_id: Event.where(event_name: "Meeting").first.id,
          user_id:  1,
          sign_in: true,
          point_recv: Faker::Number.number(digits: 3)
        }
      end

      it 'updates the requested event_hist' do
        event_hist = EventHist.create! valid_attributes
        patch event_hist_url(event_hist), params: { event_hist: new_attributes }, as: :json
        event_hist.reload
        #raise response.body
        #skip('Add assertions for updated state')
        expect(response.body).to include(new_attributes[:event_id].to_s)
        expect(response.body).to include(new_attributes[:user_id].to_s)
        expect(response.body).to include(new_attributes[:point_recv].to_s)
        #expect(response.body).to include('3')
      end

    end

    context 'with invalid parameters' do
      it "does not update event_hist values" do
        event_hist = EventHist.create! valid_attributes
        patch event_hist_url(event_hist), params: { event_hist: invalid_attributes }, as: :json
        #raise response.body
        expect(response).not_to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested event_hist' do
      event_hist = EventHist.create! valid_attributes
      expect do
        delete event_hist_url(event_hist)
      end.to change(EventHist, :count).by(-1)
    end

    it 'redirects to the event_hists list' do
      event_hist = EventHist.create! valid_attributes
      delete event_hist_url(event_hist)
      expect(response).to redirect_to(event_hists_url)
    end
  end
end
